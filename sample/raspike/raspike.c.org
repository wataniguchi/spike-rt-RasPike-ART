/*
 * SPDX-License-Identifier: MIT
 * Copyright (c) 2022-2023 Embedded and Real-Time Systems Laboratory,
 *            Graduate School of Information Science, Nagoya Univ., JAPAN
 */

#include <kernel.h>
#include <kernel_cfg.h>
#include <t_syslog.h>
#include <stdio.h>
#include <string.h>
#include <serial/serial.h>
#include <spike/hub/system.h>
#include <spike/pup/motor.h>
//#include "app_config.h"
#include "raspike.h"


static int send_data(const char* buf, size_t size)
{
  ER ercd;
  ercd = serial_wri_dat(SIO_USB_PORTID,buf,size);

  if ( ercd == E_OK ) return ercd;
  dly_tsk(10*1000);
  return 0;

}

static int wait_read(const char* buf, size_t size)
{
   return serial_rea_dat(SIO_USB_PORTID, buf, size);
}


/*
 * Application Main Task
 */
void
main_task(intptr_t exinf)
{
  pbio_error_t err;
  pup_motor_t *motor;
  serial_opn_por(SIO_USB_PORTID);

  hub_display_number(0);  
  dly_tsk(3*1000*1000);
  
  //syslog(LOG_NOTICE, "Set Up Motor\n");

  // Get pointer to servo

  unsigned char buf[255];
//  const char code[] = {'a','b','c','d'};
  const char code[] = {2,2,3,4};
  const char send_code[] = {1};
  motor = pup_motor_get_device(PBIO_PORT_ID_D);
  

  if(motor == NULL) {
    hub_system_shutdown();
  }
  
  bool reset_count = true;
  err = pup_motor_setup(motor, PUP_DIRECTION_CLOCKWISE, reset_count);
  if(motor == NULL) {
    hub_system_shutdown();
  }
//  pup_motor_set_speed(motor,0); 

#if 0
  while(1) {
  fwrite(code,4,1,fd);
  dly_tsk(3*1000*1000);

  } 
#endif

send_data(send_code,1);

 while (1) {
    char c;
    int len = wait_read(&c,1);
    if ( len > 0 ) {
      hub_display_number(c);
      c++;
      send_data(&c,1);
    } else {
      hub_display_number(len);
    }
 }



while(1) {
 while (1) {
    int len = wait_read(buf,1);
    if ( len > 0 ) {
      if (memcmp(buf,code,1) == 0 ) {break;}
      else {hub_display_number(buf[0]%100);}
    }
  }
  int len = wait_read(buf,1);
  err = pup_motor_set_speed(motor, (int)buf[0]);
  if (err != PBIO_SUCCESS) {
    hub_system_shutdown();
  }
  send_data(send_code,1);
  hub_display_number(buf[0]%100);

};
  dly_tsk(3*1000*1000);

  hub_system_shutdown();
}
